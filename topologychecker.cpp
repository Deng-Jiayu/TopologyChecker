/***************************************************************************
  topologychecker.cpp
  QGIS topology checker
  -------------------
         begin                : [PluginDate]
         copyright            : [(C) Your Name and Date]
         email                : [Your Email]

 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

//
// QGIS Specific includes
//

#include "qgisinterface.h"
#include "qgis_gui.h"
#include "qgsguiutils.h"

#include "topologychecker.h"

//
// Qt Related Includes
//

#include <QAction>
#include <QToolBar>
#include <QTranslator>
#include <QApplication>
#include <QSettings>
#include <QDir>

static const QString sName = QObject::tr("Topology checker");
static const QString sDescription = QObject::tr("QGIS topology checker");
static const QString sCategory = QObject::tr("vector");
static const QString sPluginVersion = QObject::tr("Version 0.1");
static const QgisPlugin::PluginType sPluginType = QgisPlugin::UI;
static const QString sPluginIcon = ":/icons/mTool.svg";

//////////////////////////////////////////////////////////////////////
//
// THE FOLLOWING METHODS ARE MANDATORY FOR ALL PLUGINS
//
//////////////////////////////////////////////////////////////////////

/**
 * Constructor for the plugin. The plugin is passed a pointer
 * an interface object that provides access to exposed functions in QGIS.
 * @param theQGisInterface - Pointer to the QGIS interface object
 */
TopologyChecker::TopologyChecker(QgisInterface *theQgisInterface) : QgisPlugin(sName, sDescription, sCategory, sPluginVersion, sPluginType),
                                                                    mQGisIface(theQgisInterface)
{
}

TopologyChecker::~TopologyChecker()
{
}

/*
 * Initialize the GUI interface for the plugin - this is only called once when the plugin is
 * added to the plugin registry in the QGIS application.
 */
void TopologyChecker::initGui()
{

  // Create the action for tool
  mQActionPointer = new QAction(QIcon(":/icons/mTool.svg"), QStringLiteral("数据检查"), this);
  mQActionPointer->setObjectName("mQActionPointer");
  // Set the what's this text
  mQActionPointer->setWhatsThis(tr("QGIS topology checker"));
  // Connect the action to the run
  connect(mQActionPointer, SIGNAL(triggered()), this, SLOT(run()));
  // Add the icon to the toolbar
  mQGisIface->addToolBarIcon(mQActionPointer);
  mQGisIface->addPluginToMenu(tr("&Topology checker"), mQActionPointer);
}
// method defined in interface
void TopologyChecker::help()
{
  // implement me!
}

// Slot called when the menu item is triggered
// If you created more menu items / toolbar buttons in initiGui, you should
// create a separate handler for each action - this single run() method will
// not be enough
void TopologyChecker::run()
{
  //  TopologyCheckerGui *myPluginGui = new TopologyCheckerGui( mQGisIface->mainWindow(), QgsGuiUtils::ModalDialogFlags );
  //  myPluginGui->setAttribute( Qt::WA_DeleteOnClose );

  //  myPluginGui->show();

  if (mDock == nullptr)
  {
    mDock = new CheckDock(mQGisIface, mQGisIface->mainWindow());
    mDock->setWindowTitle(QStringLiteral("数据检查"));
    mQGisIface->addDockWidget(Qt::RightDockWidgetArea, mDock);
  }
  mDock->show();
}

// Unload the plugin by cleaning up the GUI
void TopologyChecker::unload()
{
  // remove the GUI
  mQGisIface->removePluginMenu("&Topology checker", mQActionPointer);
  mQGisIface->removeToolBarIcon(mQActionPointer);
  delete mQActionPointer;
}

//////////////////////////////////////////////////////////////////////////
//
//
//  THE FOLLOWING CODE IS AUTOGENERATED BY THE PLUGIN BUILDER SCRIPT
//    YOU WOULD NORMALLY NOT NEED TO MODIFY THIS, AND YOUR PLUGIN
//      MAY NOT WORK PROPERLY IF YOU MODIFY THIS INCORRECTLY
//
//
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
// Load/Unload Translator
QTranslator gTranslator;
void loadTranslator()
{
  if (!gTranslator.isEmpty())
    return;

  QSettings mySettings;
  QString i18nPath = QApplication::applicationDirPath() + QDir::separator() + "i18n";
  QString myUserLocale = mySettings.value("locale/userLocale", "").toString();
  bool myLocaleOverrideFlag = mySettings.value("locale/overrideFlag", false).toBool();
  QString myTranslationCode;
  if (!myTranslationCode.isNull() && !myTranslationCode.isEmpty())
  {
    mySettings.setValue("locale/userLocale", myTranslationCode);
  }
  else
  {
    if (!myLocaleOverrideFlag || myUserLocale.isEmpty())
    {
      myTranslationCode = QLocale::system().name();
      mySettings.setValue("locale/userLocale", myTranslationCode);
    }
    else
    {
      myTranslationCode = myUserLocale;
    }
  }

  if (myTranslationCode != "C")
  {
    if (gTranslator.load(QString("TopologyChecker_") + myTranslationCode, i18nPath))
    {
      QApplication::installTranslator(&gTranslator);
    }
    else
    {
      qWarning("loading of TopologyChecker translation failed [%s]", QString("%1/TopologyChecker_%2").arg(i18nPath).arg(myTranslationCode).toLocal8Bit().constData());
    }
  }
}

void unloadTranslator()
{
  if (!gTranslator.isEmpty())
    QApplication::removeTranslator(&gTranslator);
}
//////////////////////////////////////////////////////////////

/**
 * Required extern functions needed  for every plugin
 * These functions can be called prior to creating an instance
 * of the plugin class
 */
// Class factory to return a new instance of the plugin class
QGISEXTERN QgisPlugin *classFactory(QgisInterface *theQgisInterfacePointer)
{
  loadTranslator();
  return new TopologyChecker(theQgisInterfacePointer);
}
// Return the name of the plugin - note that we do not user class members as
// the class may not yet be insantiated when this method is called.
QGISEXTERN QString name()
{
  return sName;
}

// Return the description
QGISEXTERN QString description()
{
  return sDescription;
}

// Return the category
QGISEXTERN QString category()
{
  return sCategory;
}

// Return the type (either UI or MapLayer plugin)
QGISEXTERN int type()
{
  return sPluginType;
}

// Return the version number for the plugin
QGISEXTERN QString version()
{
  return sPluginVersion;
}

QGISEXTERN QString icon()
{
  return sPluginIcon;
}

// Delete ourself
QGISEXTERN void unload(QgisPlugin *thePluginPointer)
{
  delete thePluginPointer;
  unloadTranslator();
}
